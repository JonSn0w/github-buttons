// Generated by CoffeeScript 1.12.5
(function() {
  var ButtonAnchor, ButtonForm, ButtonFrame, ButtonFrameContent, CONFIG_ANCHOR_CLASS, CONFIG_API, CONFIG_ICON_CLASS, CONFIG_ICON_DEFAULT, CONFIG_URL, CONFIG_UUID, Code, Deferred, Element, EventTarget, Form, Frame, GitHubAPIStatus, Hash, PreviewAnchor, PreviewFrame, QueryString, document, window,
    slice = [].slice,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  window = this;

  document = window.document;

  CONFIG_API = "https://api.github.com";

  CONFIG_ANCHOR_CLASS = "github-button";

  CONFIG_ICON_CLASS = "octicon";

  CONFIG_ICON_DEFAULT = CONFIG_ICON_CLASS + "-mark-github";

  CONFIG_URL = !{}.hasOwnProperty.call(document, "currentScript") && delete document.currentScript && document.currentScript ? document.currentScript.src.replace(/[^\/]*([?#].*)?$/, "") : (/^http:/.test(document.location) ? "http" : "https") + "://buttons.github.io/";

  CONFIG_UUID = "faa75404-3b97-5585-b449-4bc51338fbd1";

  QueryString = (function() {
    function QueryString() {}

    QueryString.stringify = function(obj) {
      var key, results, value;
      results = [];
      for (key in obj) {
        value = obj[key];
        results.push((encodeURIComponent(key)) + "=" + (value != null ? encodeURIComponent(value) : ""));
      }
      return results.join("&");
    };

    QueryString.parse = function(str) {
      var j, key, len, obj, pair, ref, ref1, value;
      obj = {};
      ref = str.split("&");
      for (j = 0, len = ref.length; j < len; j++) {
        pair = ref[j];
        if (!(pair !== "")) {
          continue;
        }
        ref1 = pair.split("="), key = ref1[0], value = 2 <= ref1.length ? slice.call(ref1, 1) : [];
        if (key !== "") {
          obj[decodeURIComponent(key)] = decodeURIComponent(value.join("="));
        }
      }
      return obj;
    };

    return QueryString;

  })();

  Hash = (function() {
    function Hash() {}

    Hash.encode = function(data) {
      return "#" + QueryString.stringify(data);
    };

    Hash.decode = function(data) {
      if (data == null) {
        data = document.location.hash;
      }
      return (QueryString.parse(data.replace(/^#/, ""))) || {};
    };

    return Hash;

  })();

  EventTarget = (function() {
    var addEventListener, removeEventListener;

    function EventTarget($) {
      this.$ = $;
    }

    EventTarget.prototype.on = function() {
      var callback, eventName, events, func, j, k, len;
      events = 2 <= arguments.length ? slice.call(arguments, 0, j = arguments.length - 1) : (j = 0, []), func = arguments[j++];
      callback = (function(_this) {
        return function(event) {
          return func.call(_this, event || window.event);
        };
      })(this);
      for (k = 0, len = events.length; k < len; k++) {
        eventName = events[k];
        addEventListener(this.$, eventName, callback);
      }
    };

    EventTarget.prototype.once = function() {
      var callback, eventName, events, func, j, k, len;
      events = 2 <= arguments.length ? slice.call(arguments, 0, j = arguments.length - 1) : (j = 0, []), func = arguments[j++];
      callback = (function(_this) {
        return function(event) {
          var eventName, k, len;
          for (k = 0, len = events.length; k < len; k++) {
            eventName = events[k];
            removeEventListener(_this.$, eventName, callback);
          }
          return func.call(_this, event || window.event);
        };
      })(this);
      for (k = 0, len = events.length; k < len; k++) {
        eventName = events[k];
        addEventListener(this.$, eventName, callback);
      }
    };

    addEventListener = function(element, event, func) {
      if (element.addEventListener) {
        element.addEventListener("" + event, func);
      } else {
        element.attachEvent("on" + event, func);
      }
    };

    removeEventListener = function(element, event, func) {
      if (element.removeEventListener) {
        element.removeEventListener("" + event, func);
      } else {
        element.detachEvent("on" + event, func);
      }
    };

    return EventTarget;

  })();

  Element = (function(superClass) {
    extend(Element, superClass);

    function Element(element, callback) {
      this.$ = element && element.nodeType === 1 ? element : document.createElement(element);
      if (callback) {
        callback.call(this, this.$);
      }
    }

    return Element;

  })(EventTarget);

  Frame = (function(superClass) {
    var devicePixelRatio, roundPixel;

    extend(Frame, superClass);

    function Frame(callback) {
      Frame.__super__.constructor.call(this, "iframe", function(iframe) {
        var key, ref, value;
        ref = {
          allowtransparency: true,
          scrolling: "no",
          frameBorder: 0
        };
        for (key in ref) {
          value = ref[key];
          iframe.setAttribute(key, value);
        }
        iframe.style.cssText = "width: 1px; height: 0; border: none";
        iframe.src = "javascript:0";
        if (callback) {
          callback.call(this, iframe);
        }
      });
    }

    Frame.prototype.html = function(html) {
      var contentDocument;
      try {
        contentDocument = this.$.contentWindow.document;
        contentDocument.open().write(html);
        contentDocument.close();
      } catch (error) {}
    };

    Frame.prototype.load = function(src) {
      this.$.src = src;
    };

    Frame.prototype.size = function() {
      var body, boundingClientRect, contentDocument, height, html, width;
      try {
        contentDocument = this.$.contentWindow.document;
        html = contentDocument.documentElement;
        body = contentDocument.body;
        width = html.scrollWidth;
        height = html.scrollHeight;
        if (body.getBoundingClientRect) {
          body.style.display = "inline-block";
          boundingClientRect = body.getBoundingClientRect();
          width = Math.max(width, roundPixel(boundingClientRect.width || boundingClientRect.right - boundingClientRect.left));
          height = Math.max(height, roundPixel(boundingClientRect.height || boundingClientRect.bottom - boundingClientRect.top));
          body.style.display = "";
        }
        return {
          width: width + "px",
          height: height + "px"
        };
      } catch (error) {}
    };

    Frame.prototype.resize = function(arg) {
      var height, ref, width;
      ref = arg != null ? arg : this.size() || {}, width = ref.width, height = ref.height;
      if (width) {
        this.$.style.width = width;
      }
      if (height) {
        this.$.style.height = height;
      }
    };

    devicePixelRatio = window.devicePixelRatio || 1;

    roundPixel = function(px) {
      return (devicePixelRatio > 1 ? Math.ceil(Math.round(px * devicePixelRatio) / devicePixelRatio * 2) / 2 : Math.ceil(px)) || 0;
    };

    return Frame;

  })(Element);

  ButtonAnchor = (function() {
    function ButtonAnchor() {}

    ButtonAnchor.parse = function(element) {
      var attribute, j, len, options, ref;
      options = {
        "href": element.href,
        "text": element.getAttribute("data-text") || element.textContent || element.innerText || ""
      };
      ref = ["data-show-count", "data-style", "data-icon", "aria-label"];
      for (j = 0, len = ref.length; j < len; j++) {
        attribute = ref[j];
        options[attribute] = element.getAttribute(attribute) || "";
      }
      if (element.getAttribute("data-count-api")) {
        console && console.warn("GitHub Buttons deprecated `data-count-api`: use `data-show-count` instead. Please refer to https://github.com/ntkme/github-buttons for more info.");
        options["data-show-count"] = 1;
      }
      return options;
    };

    return ButtonAnchor;

  })();

  ButtonFrame = (function(superClass) {
    extend(ButtonFrame, superClass);

    function ButtonFrame(hash, beforeload, callback) {
      var reload;
      ButtonFrame.__super__.constructor.call(this, beforeload);
      reload = (function(_this) {
        return function() {
          var size;
          reload = null;
          size = _this.size();
          _this.$.parentNode.removeChild(_this.$);
          _this.once("load", function() {
            this.resize(size);
          });
          _this.load(CONFIG_URL + "buttons.html" + hash);
          if (callback) {
            callback.call(_this, _this.$);
          }
        };
      })(this);
      this.once("load", function() {
        var jsonp_callback;
        if (jsonp_callback = this.$.contentWindow.callback) {
          new Element(jsonp_callback.script, function(script) {
            this.on("load", "error", function() {
              if (reload) {
                reload();
              }
            });
            if (script.readyState) {
              this.on("readystatechange", function() {
                if (!/i/.test(script.readyState) && reload) {
                  reload();
                }
              });
            }
          });
        } else {
          reload();
        }
      });
      this.html("<!DOCTYPE html><html><head><meta charset=\"utf-8\"><title>" + CONFIG_UUID + "</title><base><!--[if lte IE 6]></base><![endif]--><link rel=\"stylesheet\" href=\"" + CONFIG_URL + "assets/css/buttons.css\"><script>document.location.hash = \"" + hash + "\";</script></head><body><script src=\"" + CONFIG_URL + "buttons.js\"></script></body></html>");
    }

    return ButtonFrame;

  })(Frame);

  ButtonFrameContent = (function() {
    var Anchor;

    function ButtonFrameContent(options) {
      if (options) {
        document.body.className = options["data-style"] || "";
        new Anchor(options.href, null, function(a) {
          var aria_label;
          a.className = "button";
          if (aria_label = options["aria-label"]) {
            a.setAttribute("aria-label", aria_label);
          }
          new Element("i", function(i) {
            i.className = CONFIG_ICON_CLASS + " " + (options["data-icon"] || CONFIG_ICON_DEFAULT);
            i.setAttribute("aria-hidden", "true");
            a.appendChild(i);
          });
          a.appendChild(document.createTextNode(" "));
          new Element("span", function(span) {
            if (options.text) {
              span.appendChild(document.createTextNode(options.text));
            }
            a.appendChild(span);
          });
          document.body.appendChild(a);
          if (!(a.hostname === "github.com" && /^true|1$/i.test(options["data-show-count"]))) {
            return;
          }
          (function() {
            var api, href, match, property;
            match = a.pathname.replace(/^(?!\/)/, "/").match(/^\/([^\/?#]+)(?:\/([^\/?#]+)(?:\/(?:(subscription)|(fork)|(issues)|([^\/?#]+)))?)?(?:[\/?#]|$)/);
            if (!(match && !match[6])) {
              return;
            }
            if (match[2]) {
              api = "/repos/" + match[1] + "/" + match[2];
              href = "/" + match[1] + "/" + match[2] + "/";
              if (match[3]) {
                property = "subscribers_count";
                href += "watchers";
              } else if (match[4]) {
                property = "forks_count";
                href += "network";
              } else if (match[5]) {
                property = "open_issues_count";
                href += "issues";
              } else {
                property = "stargazers_count";
                href += "stargazers";
              }
            } else {
              api = "/users/" + match[1];
              property = "followers";
              href = "/" + match[1] + "/" + property;
            }
            new Anchor(href, a.href, function(a) {
              a.className = "count";
              new Element("b", function(b) {
                a.appendChild(b);
              });
              new Element("i", function(i) {
                a.appendChild(i);
              });
              new Element("span", function(span) {
                new Element("script", function(script) {
                  var head;
                  script.async = true;
                  script.src = CONFIG_API + (function() {
                    var query;
                    query = QueryString.parse(api.split("?").slice(1).join("?"));
                    query.callback = "callback";
                    return (api.split("?")[0]) + "?" + (QueryString.stringify(query));
                  })();
                  window.callback = function(json) {
                    var data;
                    window.callback = null;
                    if (json.meta.status === 200) {
                      data = json.data[property];
                      span.appendChild(document.createTextNode(("" + data).replace(/\B(?=(\d{3})+(?!\d))/g, ",")));
                      a.appendChild(span);
                      a.setAttribute("aria-label", data + " " + (property.replace(/_count$/, "").replace("_", " ")) + " on GitHub");
                      document.body.appendChild(a);
                    }
                  };
                  window.callback.script = script;
                  this.on("error", function() {
                    window.callback = null;
                  });
                  if (script.readyState) {
                    this.on("readystatechange", function() {
                      if (script.readyState === "loaded" && script.children && script.readyState === "loading") {
                        window.callback = null;
                      }
                    });
                  }
                  head = document.getElementsByTagName("head")[0];
                  if ("[object Opera]" === {}.toString.call(window.opera)) {
                    new EventTarget(document).on("DOMContentLoaded", function() {
                      head.appendChild(script);
                    });
                  } else {
                    head.appendChild(script);
                  }
                });
              });
            });
          })();
        });
      }
    }

    Anchor = (function(superClass) {
      var base, javascript, r_archive, r_hostname;

      extend(Anchor, superClass);

      function Anchor(urlString, baseURLstring, callback) {
        Anchor.__super__.constructor.call(this, "a", function(a) {
          if ((a.href = baseURLstring) && a.protocol !== javascript) {
            try {
              a.href = new URL(urlString, baseURLstring).href;
            } catch (error) {
              base.href = baseURLstring;
              a.href = urlString;
              new Element("div", function(div) {
                div.innerHTML = a.outerHTML;
                a.href = div.lastChild.href;
                div = null;
              });
              base.href = document.location.href;
              base.removeAttribute("href");
            }
          } else {
            a.href = urlString;
          }
          if (r_archive.test(a.href)) {
            a.target = "_top";
          }
          if (a.protocol === javascript || !r_hostname.test("." + a.hostname)) {
            a.href = "#";
            a.target = "_self";
          }
          callback(a);
        });
      }

      base = document.getElementsByTagName("base")[0];

      javascript = "javascript:";

      r_hostname = /\.github\.com$/;

      r_archive = /^https?:\/\/((gist\.)?github\.com\/[^\/?#]+\/[^\/?#]+\/archive\/|github\.com\/[^\/?#]+\/[^\/?#]+\/releases\/download\/|codeload\.github\.com\/)/;

      return Anchor;

    })(Element);

    return ButtonFrameContent;

  })();

  Deferred = (function() {
    function Deferred(func) {
      var callback;
      if (/m/.test(document.readyState) || (!/g/.test(document.readyState) && !document.documentElement.doScroll)) {
        window.setTimeout(func);
      } else {
        if (document.addEventListener) {
          new EventTarget(document).once("DOMContentLoaded", func);
        } else {
          callback = function() {
            if (/m/.test(document.readyState)) {
              document.detachEvent("onreadystatechange", callback);
              if (func) {
                func();
              }
            }
          };
          document.attachEvent("onreadystatechange", callback);
        }
      }
    }

    return Deferred;

  })();

  GitHubAPIStatus = (function() {
    function GitHubAPIStatus() {}

    GitHubAPIStatus.low_rate_limit = false;

    window.callback = function(json) {
      GitHubAPIStatus.rate_limit = json.data;
      GitHubAPIStatus.low_rate_limit = GitHubAPIStatus.rate_limit.resources.core.remaining < 16;
    };

    GitHubAPIStatus.update = function() {
      if (!window.callback.script) {
        new Element("script", function(script) {
          var head;
          script.async = true;
          script.src = "https://api.github.com/rate_limit?callback=callback";
          window.callback.script = script;
          this.on("readystatechange", "load", "error", function() {
            if (!script.readyState || /loaded|complete/.test(script.readyState)) {
              script.parentNode.removeChild(script);
              window.callback.script = null;
            }
          });
          head = document.getElementsByTagName("head")[0];
          head.insertBefore(script, head.firstChild);
        });
      }
    };

    GitHubAPIStatus.update();

    return GitHubAPIStatus;

  })();

  Element = (function(superClass) {
    var addClass, hasClass, r_whitespace, removeClass;

    extend(Element, superClass);

    function Element(element, callback) {
      this.$ = element && element.nodeType === 1 ? element : document.createElement(element);
      if (callback) {
        callback.call(this, this.$);
      }
    }

    Element.prototype.addClass = function(className) {
      if (!hasClass(this.$, className)) {
        addClass(this.$, className);
      }
    };

    Element.prototype.removeClass = function(className) {
      if (hasClass(this.$, className)) {
        removeClass(this.$, className);
      }
    };

    Element.prototype.hasClass = function(className) {
      return hasClass(this.$, className);
    };

    addClass = function(element, className) {
      element.className += " " + className;
    };

    removeClass = function(element, className) {
      element.className = (" " + element.className + " ").replace(r_whitespace, " ").replace(" " + className + " ", "").replace(/^ | $/, "");
    };

    hasClass = function(element, className) {
      return (" " + element.className + " ").replace(r_whitespace, " ").indexOf(" " + className + " ") >= 0;
    };

    r_whitespace = /[ \t\n\f\r]+/g;

    return Element;

  })(EventTarget);

  Form = (function(superClass) {
    extend(Form, superClass);

    function Form() {
      return Form.__super__.constructor.apply(this, arguments);
    }

    Form.prototype.on = function() {
      var callback, element, events, func, j, k, len, ref;
      events = 2 <= arguments.length ? slice.call(arguments, 0, j = arguments.length - 1) : (j = 0, []), func = arguments[j++];
      if (events.indexOf("change") >= 0) {
        callback = (function(_this) {
          return function(event) {
            return func.call(_this, event || window.event);
          };
        })(this);
        ref = this.$.elements;
        for (k = 0, len = ref.length; k < len; k++) {
          element = ref[k];
          new Element(element).on("change", "input", callback);
        }
      }
      return Form.__super__.on.apply(this, arguments);
    };

    Form.prototype.serialize = function() {
      var data, j, len, node, ref;
      data = {};
      ref = this.$.elements;
      for (j = 0, len = ref.length; j < len; j++) {
        node = ref[j];
        if (node.name) {
          switch (node.type) {
            case "radio":
            case "checkbox":
              if (node.checked) {
                data[node.name] = node.value;
              }
              break;
            default:
              data[node.name] = node.value;
          }
        }
      }
      return data;
    };

    return Form;

  })(Element);

  PreviewAnchor = (function(superClass) {
    extend(PreviewAnchor, superClass);

    function PreviewAnchor(arg, callback) {
      var aria, data, href, text;
      href = arg.href, text = arg.text, data = arg.data, aria = arg.aria;
      PreviewAnchor.__super__.constructor.call(this, "a", function(a) {
        var name, value;
        a.className = CONFIG_ANCHOR_CLASS;
        a.href = href;
        a.appendChild(document.createTextNode("" + text));
        for (name in data) {
          value = data[name];
          a.setAttribute("data-" + name, value);
        }
        for (name in aria) {
          value = aria[name];
          a.setAttribute("aria-" + name, value);
        }
        if (callback) {
          callback(a);
        }
      });
    }

    return PreviewAnchor;

  })(Element);

  PreviewFrame = (function(superClass) {
    extend(PreviewFrame, superClass);

    function PreviewFrame(preview) {
      PreviewFrame.__super__.constructor.call(this, function(iframe) {
        preview.appendChild(iframe);
        iframe.src = "buttons.html";
      });
      this.on("load", function() {
        var callback, script;
        if (callback = this.$.contentWindow.callback) {
          script = callback.script;
          if (script.readyState) {
            new Element(script).on("readystatechange", function() {
              if (/loaded|complete/.test(script.readyState)) {
                this.resize();
              }
            });
          } else {
            new Element(script).on("load", "error", function() {
              this.resize();
            });
          }
        } else {
          this.resize();
        }
      });
    }

    PreviewFrame.prototype.load = function(config) {
      var parentNode;
      parentNode = this.$.parentNode;
      parentNode.removeChild(this.$);
      parentNode.style.height = ((config["data-style"] === "mega" ? 28 : 20) + 2) + "px";
      this.$.style.width = "1px";
      this.$.style.height = "0";
      this.$.src = "buttons.html" + (Hash.encode(config));
      parentNode.appendChild(this.$);
    };

    return PreviewFrame;

  })(Frame);

  Code = (function(superClass) {
    extend(Code, superClass);

    function Code() {
      Code.__super__.constructor.apply(this, arguments);
      this.on("focus", function() {
        this.$.select();
      });
      this.on("click", function() {
        this.$.select();
      });
      this.on("mouseup", function(event) {
        event.preventDefault();
        return false;
      });
    }

    return Code;

  })(Element);

  ButtonForm = (function(superClass) {
    var validate_repo, validate_user;

    extend(ButtonForm, superClass);

    function ButtonForm($, arg) {
      var button, callback, code, content, frame, key, ref, ref1, snippet, user_repo, value, warning;
      this.$ = $;
      content = arg.content, (ref = arg.preview, button = ref.button, frame = ref.frame, code = ref.code, warning = ref.warning), snippet = arg.snippet, user_repo = arg.user_repo;
      ref1 = {
        autocapitalize: "none",
        autocomplete: "off",
        autocorrect: "off",
        spellcheck: "false"
      };
      for (key in ref1) {
        value = ref1[key];
        this.$.setAttribute(key, value);
      }
      snippet.$.value = "<!-- Place this tag in your head or just before your close body tag. -->\n<script async defer src=\"https://buttons.github.io/buttons.js\"></script>";
      callback = (function(_this) {
        return function(arg1) {
          var cache, force, j, k, len, len1, name, options, ref2, ref3;
          force = arg1.force;
          options = _this.serialize();
          if (options.type) {
            content.removeClass("hidden");
            ref2 = ["repo", "standard-icon"];
            for (j = 0, len = ref2.length; j < len; j++) {
              name = ref2[j];
              _this.$.elements[name].disabled = options.type === "follow";
            }
            ref3 = ["show-count"];
            for (k = 0, len1 = ref3.length; k < len1; k++) {
              name = ref3[k];
              _this.$.elements[name].disabled = options.type === "download";
            }
            if (!((!options.user || validate_user(options.user)) && (options.type === "follow" || !options.repo || validate_repo(options.repo)))) {
              user_repo.addClass("has-error");
            } else {
              user_repo.removeClass("has-error");
              if (options.user === "" || (options.type !== "follow" && options.repo === "")) {
                user_repo.addClass("has-warning");
              } else {
                user_repo.removeClass("has-warning");
              }
            }
            if ((user_repo.hasClass("has-error")) || (user_repo.hasClass("has-warning"))) {
              options.user = "ntkme";
              options.repo = "github-buttons";
            }
            if (_this.cache !== (cache = Hash.encode(options)) || force) {
              _this.cache = cache;
              new PreviewAnchor(_this.parse(options), function(a) {
                var reset;
                code.$.value = "<!-- Place this tag where you want the button to render. -->\n" + a.outerHTML;
                button.addClass("hidden");
                if ((options["show-count"] != null) && options.type !== "download") {
                  GitHubAPIStatus.update();
                  if (GitHubAPIStatus.low_rate_limit) {
                    button.removeClass("hidden");
                    reset = new Date(GitHubAPIStatus.rate_limit.resources.core.reset * 1000);
                    if (!_this.reset || reset > _this.reset) {
                      _this.reset = reset;
                      warning.removeClass("hidden");
                    }
                    if (force) {
                      warning.addClass("hidden");
                    } else {
                      a.removeAttribute("data-count-api");
                    }
                  }
                }
                frame.load(ButtonAnchor.parse(a));
                a = null;
              });
            }
          }
        };
      })(this);
      button.on("click", function(event) {
        event.preventDefault();
        callback({
          force: true
        });
        return false;
      });
      this.on("change", callback);
    }

    ButtonForm.prototype.parse = function(options) {
      var config, repo, type, user;
      if (options == null) {
        options = this.serialize();
      }
      type = options.type, user = options.user, repo = options.repo;
      config = {
        className: "github-button",
        href: (function() {
          switch (type) {
            case "follow":
              return "https://github.com/" + user;
            case "watch":
              return "https://github.com/" + user + "/" + repo + "/subscription";
            case "star":
              return "https://github.com/" + user + "/" + repo;
            case "fork":
              return "https://github.com/" + user + "/" + repo + "/fork";
            case "issue":
              return "https://github.com/" + user + "/" + repo + "/issues";
            case "download":
              return "https://github.com/" + user + "/" + repo + "/archive/master.zip";
            default:
              return "https://github.com/";
          }
        })(),
        text: (function() {
          switch (type) {
            case "follow":
              return "Follow @" + user;
            default:
              return type.charAt(0).toUpperCase() + type.slice(1).toLowerCase();
          }
        })(),
        data: {
          icon: (function() {
            switch (type) {
              case "watch":
                return "octicon-eye";
              case "star":
                return "octicon-star";
              case "fork":
                return "octicon-repo-forked";
              case "issue":
                return "octicon-issue-opened";
              case "download":
                return "octicon-cloud-download";
              default:
                return "octicon-mark-github";
            }
          })()
        },
        aria: {
          label: (function() {
            switch (type) {
              case "follow":
                return "Follow @" + user + " on GitHub";
              case "watch":
              case "star":
              case "fork":
              case "issue":
              case "download":
                return (type.charAt(0).toUpperCase() + type.slice(1).toLowerCase()) + " " + user + "/" + repo + " on GitHub";
              default:
                return "GitHub";
            }
          })()
        }
      };
      if (options["large-button"] != null) {
        config.data.style = "mega";
      }
      if (options["show-count"] != null) {
        switch (type) {
          case "follow":
          case "watch":
          case "star":
          case "fork":
          case "issue":
            config.data["show-count"] = "true";
        }
      }
      if ((options["standard-icon"] != null) || config.data.icon === "octicon-mark-github") {
        delete config.data.icon;
      }
      return config;
    };

    validate_user = function(user) {
      var ref;
      return (0 < (ref = user.length) && ref < 40) && !/[^A-Za-z0-9-]|^-|-$|--/i.test(user);
    };

    validate_repo = function(repo) {
      var ref;
      return (0 < (ref = repo.length) && ref < 101) && !/[^\w-.]|\.git$|^\.\.?$/i.test(repo);
    };

    return ButtonForm;

  })(Form);

  new Deferred(function() {
    new ButtonForm(document.getElementById("button-config"), {
      content: new Element(document.getElementById("content")),
      user_repo: new Element(document.getElementById("user-repo")),
      preview: {
        button: new Element(document.getElementById("preview-button")),
        frame: new PreviewFrame(document.getElementById("preview")),
        code: new Code(document.getElementById("code")),
        warning: new Element(document.getElementById("preview-warning"))
      },
      snippet: new Code(document.getElementById("snippet"))
    });
  });

  this.onbeforeunload = function() {};

}).call(this);
